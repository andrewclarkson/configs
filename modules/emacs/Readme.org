#+TITLE: Emacs configuration in Nix
#+PROPERTY: header-args:nix :tangle ./default.nix

* Overview

I've opted for a literate programming style for this nix module. It helps me remember why certain things exist and where I got them from. This is all powered by org-babel which allows me to "tangle" the following code blocks together in order.

* Generation

To generate the ~default.nix~, you'll need to "tangle" the various chunks of code into files.

To do this from the command line, you'll need to run something like

#+begin_src sh
emacs -l ob-tangle --batch --eval '(org-babel-tangle-file "Readme.org")'
#+end_src

From there you can build an install it using nix. More information can be found in [[file:../../Readme.org][Readme.org]] at the root of this repo.

* Nix Configuration

The following nix expression adds a customized Emacs package to ~home.packages~. It packages up all the necessary dependencies declaratively.

This is a standard prelude to a nix module. The arguments are passed in by ~callPackage~.

#+begin_src nix
{ config, lib, pkgs, ... }:
with pkgs;
let
#+end_src

First we need some custom environment stuff to integrate emacs with the nix package store.

For example we'll be using ripgrep as the primary file/directory searcher, normally ripgrep would be somewhere on your path, but we want to use a specific version just for emacs.
By taking ~nix-env.el.in~ and templating it with the paths to the executables we can make sure emacs uses the correct version. This is also combined with ~default.el~ as one step to avoid having to load from symlinks.

#+begin_src nix
  nixEnv = runCommand "nix-env.el" {
    inherit git ripgrep gnuplot;
  } "substituteAll ${./nix-env.el.in} $out";
  defaultEl = ../../config/emacs/default.el;
  snippets = ../../config/emacs/snippets;
  emacsEnv = runCommand "site-lisp" {} ''
    mkdir -p $out/share/emacs/site-lisp
    cp ${nixEnv} $out/share/emacs/site-lisp/nix-env.el
    cp ${defaultEl} $out/share/emacs/site-lisp/default.el
    cp -R ${snippets} $out/share/emacs/site-lisp/snippets
  '';
#+end_src


Then we just add it to ~home.packages~.

#+begin_src nix
in {
  programs.emacs = {
    enable = true;
    overrides = self: super: rec {
      lsp-metals = self.melpaBuild {
        pname   = "lsp-metals";
        ename   = "lsp-metals";
        version = "1.1.0";
        recipe  = builtins.toFile "recipe" ''
            (lsp-metals :fetcher github
                :repo "emacs-lsp/lsp-metals")
        '';

        packageRequires = [ self.emacs self.lsp-mode ];

        src = fetchFromGitHub {
            owner  = "emacs-lsp";
            repo   = "lsp-metals";
            rev    = "8f8471ca1b2a3d54bafce8949e6b13c9567d0405";
            sha256 = "0q3swqkr4kkfzp1fd7g97r2gzp11vcrx51xbywk336mb6ghlshyc";
        };
      };
    };
    extraPackages = epkgs:
      let
        melpaPkgs = (with epkgs.melpaPackages; [
        counsel
        counsel-projectile
        dap-mode
        doom-modeline
        doom-themes
        evil
        evil-collection
        evil-magit
        flycheck
        general
        ivy
        lsp-ivy
        lsp-mode
        lsp-metals
        lsp-treemacs
        lsp-ui
        magit
        nix-mode
        projectile
        rainbow-delimiters
        sbt-mode
        scala-mode
        smartparens
        treemacs
        treemacs-evil
        treemacs-magit
        treemacs-projectile
        use-package
        vterm
        which-key
        lsp-metals
        yasnippet
        ]);
        systemPkgs = [
          git
          gnuplot
          ripgrep
          metals
          emacs-all-the-icons-fonts
          source-code-pro
          source-sans-pro
          emacsEnv
        ];
      in melpaPkgs ++ systemPkgs;
    package = emacsUnstable;
  };
}
#+end_src

Note: A couple of things are missing here. The desktop files for emacs don't show up if you install them at the home level.

* Sources

** [[https://matthewbauer.us/blog/nix-and-org.html][Nix and Org by Matthew Bauer]]

This was super helpful for figuring out the literate programming stuff via
org-babel.
